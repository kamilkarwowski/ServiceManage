@model IEnumerable<ServiceManagement.Models.Zadanie>

@{
    ViewData["Title"] = "Aktualne Zadania";
}

<h1>Aktualne zadania</h1>
@if(User.IsInRole("Admin")||User.IsInRole("Kierownik"))
{
    <a asp-action="Create" class="btn btn-primary" style="margin-left5rem">
        Dodaj zadanie
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle" viewBox="0 0 16 16">
            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
        </svg>
    </a>
}



<table class="table">
    <thead>
        <tr>
            <th>
                Nazwa zadania:
            </th>
            <th>
               Opis zadania:
            </th>
            
            <th>
                Data deadline'u:
            </th>
            <th>
                Serwisant:
            </th>
            
            <th>
               Rejon:
            </th>
            <th>
                Priorytet:
            </th>
            <th>
                Status:
            </th>
           <th>Zarządzaj:</th>
           <th>Szczegóły:</th>
           
           
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
            @if (item.StatusZadania != "Zakończone - Zaakceptowane" &&( int.Parse(User.Claims.Where(u => u.Type.Contains("nameidentifier")).FirstOrDefault().Value) == item.UserId || User.IsInRole("Admin")))
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Description)
                    </td>
                   
                    <td>
                        @Html.DisplayFor(modelItem => item.Deadline)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.User.Name)
                    
                        @Html.DisplayFor(modelItem => item.User.LastName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Area.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Status.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.StatusZadania)
                    </td>
                   
                    <td>
                        @if (item.StatusZadania == "Zakończone")
                        {
                            @if (User.IsInRole("Admin"))
                            {
                                <a asp-action="Accept" asp-route-id="@item.Id">Zaakceptuj</a>

                                <a asp-action="Cancel" asp-route-id="@item.Id"> Anuluj </a>
                            }
                        }

                            @if (item.StatusZadania == "Dodane")
                        {
                            @if (User.IsInRole("Serwisant"))
                            {
                               <a asp-action="Finish" asp-route-id="@item.Id">Ukończ zadanie</a>
                            }
                        }
                    </td>
                   

                    
                    
                        
                        
                           
                        
                    
                    <td>
                        <a asp-action="Details" asp-route-id="@item.Id">
                            <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-file-earmark-fill" viewBox="0 0 16 16">
                                <path d="M4 0h5.293A1 1 0 0 1 10 .293L13.707 4a1 1 0 0 1 .293.707V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2zm5.5 1.5v2a1 1 0 0 0 1 1h2l-3-3z" />
                            </svg>
                        </a>
                    </td>
                    
                </tr>
            }
           

            <script>
                let map;
                let lat = parseFloat(@Html.Raw(Json.Serialize(item.Latitude)));
                let lng = parseFloat(@Html.Raw(Json.Serialize(item.Longtitude)));

                var directionsService = new google.maps.DirectionsService();

                var start = new google.maps.LatLng(53.117050, 23.146519); // Wprowadź współrzędne punktu początkowego
                var end = new google.maps.LatLng(lat, lng); // Wprowadź współrzędne pinezki

                var request = {
                    origin: start,
                    destination: end,
                    travelMode: google.maps.TravelMode.DRIVING, // Możesz zmienić tryb podróży na inny, np. WALKING, BICYCLING itp.
                };

                directionsService.route(request, function (result, status) {
                    if (status == google.maps.DirectionsStatus.OK) {
                        var directionsRenderer = new google.maps.DirectionsRenderer();
                        directionsRenderer.setMap(map);
                        directionsRenderer.setDirections(result);
                        console.log(result);
                    }
                });
          
            </script>
            
}
    </tbody>
</table>






    <script async defer src="https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyCcpZRdm3_FJzr-pMLd-PavJAfRvu9pVos&libraries=places&callback=initMap&v=weekly"></script>

